package main

import (
	"encoding/binary"
	"fmt"
	"hash"
)

const (
	AbsorbRounds  = 12
	SqueezeRounds = 8
	BlockSize     = 24 // 192 bits
	HashSize256   = 32 // 256 bits
	HashSize512   = 64 // 512 bits
	StateSize     = 64 // 512 bits (8x8 matrix)
)

type HAS01 struct {
	state [StateSize]byte
	hash  [HashSize512]byte
	size  int
}

func NewHAS01(size int) hash.Hash {
	if size != HashSize256 && size != HashSize512 {
		panic("Invalid hash size")
	}
	return &HAS01{size: size}
}

func (h *HAS01) Write(p []byte) (n int, err error) {
	h.absorb(p)
	return len(p), nil
}

func (h *HAS01) Sum(b []byte) []byte {
	h.squeeze()
	return append(b, h.hash[:h.size]...)
}

func (h *HAS01) Reset() {
	for i := range h.state {
		h.state[i] = 0
	}
	for i := range h.hash {
		h.hash[i] = 0
	}
}

func (h *HAS01) Size() int {
	return h.size
}

func (h *HAS01) BlockSize() int {
	return BlockSize
}

func (h *HAS01) absorb(data []byte) {
	for len(data) > 0 {
		if len(data) < BlockSize {
			block := make([]byte, BlockSize)
			copy(block, data)
			block[len(data)] = 0x80 // padding bit
			data = block
		}

		for i := 0; i < BlockSize; i++ {
			h.state[i] ^= data[i]
		}

		for i := 0; i < AbsorbRounds; i++ {
			h.F()
		}

		data = data[BlockSize:]
	}
}

func (h *HAS01) squeeze() {
	rounds := h.size / 8 // 4 for 256-bit, 8 for 512-bit
	for i := 0; i < rounds; i++ {
		h.F()
		if h.size == HashSize256 {
			copy(h.hash[i*8:(i+1)*8], h.state[40:48]) // 6th column
		} else {
			copy(h.hash[i*8:(i+1)*8], h.state[24:32]) // 4th column
		}
	}
}

func (h *HAS01) F() {
	h.theta()
	h.rho()
	h.pi()
}

func (h *HAS01) theta() {
	var c [8]uint64
	var d [8]uint64

	for i := 0; i < 8; i++ {
		c[i] = binary.LittleEndian.Uint64(h.state[i*8 : (i+1)*8])
	}

	for i := 0; i < 8; i++ {
		d[i] = c[(i-1+8)%8] ^ rotl64(c[(i+1)%8], 1)
	}

	for i := 0; i < 8; i++ {
		value := binary.LittleEndian.Uint64(h.state[i*8:(i+1)*8]) ^ d[i]
		binary.LittleEndian.PutUint64(h.state[i*8:(i+1)*8], value)
	}
}

func (h *HAS01) rho() {
	var temp [StateSize]byte
	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			temp[i*8+j] = h.state[j*8+((i+j)%8)]
		}
	}
	copy(h.state[:], temp[:])
}

func (h *HAS01) pi() {
	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			h.state[i*8+j] = sBox[h.state[i*8+j]]
		}
	}
}

func rotl64(x uint64, n int) uint64 {
	return (x << n) | (x >> (64 - n))
}

var sBox = [256]byte{
	0xA5, 0x04, 0xA6, 0xA7, 0xF7, 0xC6, 0xA4, 0x12, 0x5F, 0xC8, 0xC7, 0xD1, 0xF6, 0xD4, 0x7E, 0x7B,
	0x0B, 0xEF, 0x13, 0xAD, 0x94, 0x5B, 0x4C, 0x8A, 0x0C, 0xFC, 0xCE, 0x1C, 0x9B, 0x76, 0x19, 0xF3,
	0x21, 0x68, 0x53, 0x96, 0x2D, 0xD0, 0xA1, 0x89, 0x3D, 0x9C, 0xDA, 0x6D, 0x51, 0xAF, 0xE1, 0xE9,
	0xA2, 0xE3, 0x09, 0xFE, 0xC3, 0x3F, 0xAA, 0x1E, 0xBA, 0xDD, 0x9F, 0x1D, 0x28, 0x54, 0x8E, 0x92,
	0xE7, 0xD5, 0x43, 0x33, 0xDE, 0x81, 0x3C, 0x97, 0x32, 0xEC, 0x1F, 0x72, 0x74, 0xCD, 0xB3, 0x60,
	0x3A, 0x95, 0x39, 0xFA, 0x1A, 0x0E, 0xC1, 0x05, 0xDF, 0xCC, 0xA0, 0x8D, 0x87, 0x58, 0x83, 0xD3,
	0x26, 0xFD, 0x86, 0x7C, 0x20, 0x4B, 0x08, 0x36, 0x45, 0xDC, 0x3B, 0x79, 0x22, 0xBE, 0xAB, 0x14,
	0x2A, 0x03, 0x99, 0x2C, 0x6B, 0xE5, 0xF9, 0x5C, 0xB0, 0x85, 0x5D, 0xB2, 0x30, 0x80, 0xED, 0xDB,
	0x57, 0x8F, 0x9D, 0xA9, 0xD6, 0xB8, 0xEE, 0x24, 0xCB, 0x84, 0xB7, 0xD8, 0x69, 0xA8, 0x6F, 0x50,
	0xBD, 0xF1, 0x01, 0x38, 0xF8, 0x40, 0x4E, 0xBF, 0x9E, 0x0D, 0x91, 0xC9, 0x7D, 0xF4, 0x47, 0x07,
	0xB9, 0x63, 0x6E, 0x0F, 0xEB, 0x70, 0xD9, 0x6A, 0x7A, 0x2B, 0xA3, 0xCF, 0x44, 0x65, 0xF5, 0x00,
	0x98, 0x35, 0xC2, 0x41, 0x27, 0x1B, 0x62, 0xAC, 0x67, 0x23, 0x88, 0x10, 0xB6, 0x8C, 0x4D, 0xC0,
	0x64, 0x3E, 0x5A, 0xE8, 0x34, 0xD7, 0x9A, 0x16, 0xB4, 0x29, 0xD2, 0x37, 0x73, 0xF2, 0x6C, 0x46,
	0x06, 0xE6, 0xCA, 0xC4, 0xEA, 0x7F, 0x18, 0xE0, 0xB5, 0x31, 0xFB, 0xFF, 0x71, 0x17, 0xAE, 0x02,
	0xB1, 0x15, 0x25, 0x78, 0xBB, 0xF0, 0x61, 0x93, 0x11, 0x4F, 0x56, 0x82, 0x8B, 0x42, 0x59, 0x48,
	0x2F, 0xE2, 0x66, 0x4A, 0x0A, 0x90, 0x2E, 0x75, 0xBC, 0xC5, 0xE4, 0x55, 0x52, 0x77, 0x49, 0x5E,
}

func main() {
	data := []byte("One should never mistake pattern for meaning.")

	h256 := NewHAS01(HashSize256)
	h256.Write(data)
	hash256 := h256.Sum(nil)
	fmt.Printf("HAS01-256 Hash: %x\n", hash256)

	h512 := NewHAS01(HashSize512)
	h512.Write(data)
	hash512 := h512.Sum(nil)
	fmt.Printf("HAS01-512 Hash: %x\n", hash512)
}